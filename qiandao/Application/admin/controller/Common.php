<?php

namespace app\admin\controller;

use think\Cache;
use think\Controller;

class Common extends Controller
{

    /**
     * 清除缓存
     */
    public function delCache(){
        // 清文件缓存
        $dirs = [ROOT_PATH.'runtime/'];
        @mkdir('runtime',0777,true);
        foreach($dirs as $dir) {
            @unlink($dir);
        }
        // 清理缓存
        Cache::clear();

        $this->success('清除缓存成功！');
    }

    public function test() {
        // 乘客平均步行时间
        $walk = [89,85,87,104,84,93,91,106,94,91,129,109,98,94,83,88,81,82,92,93,110];
        // 工作日上行时刻
        $up_list = [23400, 23805, 24210, 24615, 25020, 25425, 25830, 26235, 26640, 27045, 27450, 27855, 28260, 28665, 29070, 29475, 29880, 30285, 30690, 31095, 31500, 31905, 32310, 32888, 33388, 33888, 34388, 34888, 35388, 35888, 36388, 36888, 37388, 37888, 38388, 38888, 39388, 39888, 40388, 40888, 41388, 41888, 42388, 42888, 43388, 43888, 44388, 44888, 45388, 45888, 46388, 46888, 47388, 47888, 48388, 48888, 49388, 49888, 50388, 50888, 51388, 51888, 52388, 52888, 53388, 53888, 54388, 54888, 55388, 55888, 56388, 56888, 57388, 57888, 58388, 58888, 59388, 59768, 60143, 60518, 60893, 61268, 61643, 62018, 62393, 62768, 63143, 63518, 63893, 64268, 64643, 65018, 65393, 65768, 66143, 66518, 66893, 67268, 67643, 68018, 68448, 68948, 69448, 69948, 70448, 70948, 71448, 71948, 72448, 72948, 73448, 73948, 74448, 74948, 75448, 75948, 76448, 76948, 77448, 77948, 78448, 78948, 79448, 79948, 80448, 81000, 81600, 82200, 82800];
        // 工作日下行时刻
        $back_list = [23400, 23900, 24400, 24812, 25217, 25622, 26027, 26432, 26837, 27242, 27647, 28052, 28457, 28862, 29267, 29672, 30077, 30482, 30887, 31292, 31697, 32102, 32507, 32936, 33380, 33880, 34380, 34880, 35380, 35880, 36380, 36880, 37380, 37880, 38380, 38880, 39380, 39880, 40380, 40880, 41380, 41880, 42380, 42880, 43380, 43880, 44380, 44880, 45380, 45880, 46380, 46880, 47380, 47880, 48380, 48880, 49380, 49880, 50380, 50880, 51380, 51880, 52380, 52880, 53380, 53880, 54380, 54880, 55380, 55880, 56380, 56880, 57380, 57880, 58380, 58880, 59380, 59880, 60380, 60880, 61260, 61635, 62010, 62385, 62760, 63135, 63510, 63885, 64260, 64635, 65010, 65385, 65760, 66135, 66510, 66885, 67260, 67635, 68010, 68385, 68760, 69135, 69515, 69890, 70265, 70640, 71015, 71450, 71940, 72440, 72940, 73440, 73940, 74440, 74940, 75440, 75940, 76440, 76940, 77440, 77940, 78440, 78940, 79440, 79940, 80440, 81000, 81600, 82200, 82800];
        // 正向上行到站时间：象峰(11)->福州火车南站(31)
        $station_1 = [0, 103, 235, 394, 545, 656, 804, 935, 1066, 1196, 1361, 1533, 1657, 1802, 1937, 2051, 2177, 2291, 2415, 2560, 2692];
        // 下行每站距始发站时间
        $station_2 = [2698, 2549, 2415, 2245, 2104, 1988, 1837, 1701, 1570, 1446, 1283, 1115, 992, 847, 713, 599, 473, 359, 235, 89, 0];
        $arr[][] = [0];
        for ($i=0; $i < 208; $i++) {
            for ($j=0; $j < 21; $j++) { 
                $arr[$i][$j] = 0;
            }
        }
        // $file = fopen("E:\\lab\\2018-01-11.csv",'rb');
        // $i = 0;

        // // 统计每个站台每5分钟的进站客流
        // while ($row = fgetcsv($file)) { //每次读取CSV里面的一行内容
        //     $i++;
        //     if($i == 1) {
        //         continue;
        //     }
        //     $list[] = $row;
        //     $line = $this->getLine($row[6]-$walk[(int)$row[2]-1]);
        //     // $arr[(int)$row[2]-1][$line] = $arr[(int)$row[2]-1][$line] + 1;
        //     $arr[$line][(int)$row[2]-1] = $arr[$line][(int)$row[2]-1] + 1;
        //     // dump($row);die;
            
        // }
        // session('number_befroe',$arr);
        // $arr = session('number_befroe');
        foreach ($up_list as $up) {
            # code...
        }

        $file = fopen("E:\\lab\\2018-01-11_station_per_5_minute.csv",'rb');
        $i = 0;
        while ($row = fgetcsv($file)) {
            for ($j=0; $j < 21; $j++) { 
                $arr[$i][$j] = $row[$j];
            }
            $i++;
        }

        // 结合列车时刻表再统计


        $Ps = [0.21634062140391255, 0.10529344073647871, 0.14660529344073647, 1.0, 0.16881472957422325, 0.3487917146144994, 0.2385500575373993, 0.7970080552359033, 0.5467203682393555, 0.61795166858458, 0.5217491369390104, 0.27963176064441886, 0.4514384349827388, 0.3173762945914845, 0.20345224395857306, 0.14361334867663983, 0.12186421173762946, 0.07779056386651323, 0.2417721518987342, 0.0, 0.8692750287686997];
        $a = [1,1,1,0.9,1,0.97,1,0.92,0.94,0.93,0.95,1,0.96,0.98,1,1,1,1,1,1,0.91];
        $station_in_per_day = [2264,1299,1658,9074,1851,3415,2457,7310,5135,5754,4918,2814,4307,3142,2152,1632,1443,
                   1060,2485,384,7938];

        // 写入文件
        $wfile = "E:\\lab\\2018-01-11_station_rate_per_5_minute.csv";
        $handle = fopen( $wfile, 'wb');
        if ($handle) {
            $header = ['time', '1', '2', '3', '4', '5', '6','7', '8', '9', '10','11', '12', '13', '14','15', '16', '17', '18','19', '20', '21'];
            fputcsv($handle, $header);           
            for ($i=0; $i < 208; $i++) {
                $data = [];
                $data[] = $this->getTime($i);
                for ($j=0; $j < 21; $j++) {
                    // $data[] = $arr[$i][$j];
                    // $data[] = $arr[$i][$j]/(floatval($Ps[$j]));  // 人数/比重率
                    $data[] = $arr[$i][$j] == 0 ? 0 : $arr[$i][$j]/100 * $a[$j];
                }
                fputcsv($handle, $data);
            }
            
        }
        fclose($handle);

        for ($i=0; $i < 208; $i++) {
            for ($j=0; $j < 21; $j++) {
                echo $arr[$i][$j];
                echo "\t";
            }
            echo "<br>";
        }
    }

    // 判断当前乘客进站时间所在行数（即在哪一个5分钟内）
    // 从6.30开始
    public function getLine($time) {
        $cha = $time - 23400 > 0 ? $time - 23400 : 0;
        $result = $cha / 300;
        $result = $cha % 300 == 0 ? (int)$result : (int)$result+1;
        return $result;
    }

    // 根据编号获得时刻，如0--6.30  1--6.35
    public function getTime($num) {
        
        if ($num < 6) {
            $hour = 6;
        } else {
            $hour = (int)(($num-6) / 12) + 7;
        }
        $munite = $num % 12 * 5 + 30;
        $munite = $munite >= 60 ? $munite - 60 : $munite;
        $str = $hour.':'.$munite;
        return $str;         
    }

    public function station_num_per_one_minute() {
        $test = 1;
    }




}